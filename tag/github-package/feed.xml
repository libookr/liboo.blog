<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator>
  <link href="https://blog.liboo.kr/tag/github-package/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://blog.liboo.kr/" rel="alternate" type="text/html" />
  <updated>2025-01-13T04:23:45+00:00</updated>
  <id>https://blog.liboo.kr/tag/github-package/feed.xml</id>

  
  
  

  
    <title type="html">Liboo.blog | </title>
  

  
    <subtitle>라이부 개발 블로그</subtitle>
  

  

  
    
      
    
      
    
      
    
      
    
      
    
  

  
  

  
    <entry>
      <title type="html">Github Package 로 라이브러리 배포하기</title>
      <link href="https://blog.liboo.kr/Github_Package_%EB%A1%9C_%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC_%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0" rel="alternate" type="text/html" title="Github Package 로 라이브러리 배포하기" />
      <published>2024-11-11T02:30:00+00:00</published>
      <updated>2024-11-11T02:30:00+00:00</updated>
      <id>https://blog.liboo.kr/Github_Package_%EB%A1%9C_%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC_%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0</id>
      <content type="html" xml:base="https://blog.liboo.kr/Github_Package_%EB%A1%9C_%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC_%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0">&lt;p&gt;프로젝트를 진행하면서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;node-media-server&lt;/code&gt; 라이브러리를 사용하기로 결정해서 소스 코드를 천천히 뜯어보니 우리 서비스에 맞게끔 코드를 조금 수정할 필요가 있었다.&lt;/p&gt;

&lt;p&gt;처음에는 node-media-server 소스 코드를 전부 들고와서 liboo 레포지토리에 그대로 넣은 후 코드를 수정했었는데, 경우에 따라서 누군가 코드를 읽다가 ‘이 파일들은 뭐지?’ 같은 의구심을 품을 수 있을 것 같았다.&lt;/p&gt;

&lt;p&gt;따라서 서비스에 맞게 수정한 node-media-server 를 분리하면서 다른 라이브러리를 사용하는 것 처럼 import 할 수 있도록 Github Package 를 활용해보려고 한다.&lt;/p&gt;

&lt;h2 id=&quot;github-package--npm&quot;&gt;Github Package , npm&lt;/h2&gt;

&lt;p&gt;Github Package 와 npm 은 모두 패키지 저장소의 역할을 하지만 npm 은 private 이 유료, Github Package 는 무료라는 차이가 있다. 또한 Github Package 는 Github 의 기능이기 때문에 다른 기능, 예를 들어 Github Action 같은 기능과의 연동이 쉽다.&lt;/p&gt;

&lt;p&gt;liboo 의 node-media-server 라이브러리는 private 이든, public 이든 큰 상관은 없지만 추후에 Github Action 을 활용해서 배포하는 것이 편할 것 같다는 생각에 Github Package 를 선택했다.&lt;/p&gt;

&lt;h2 id=&quot;github-package-publish&quot;&gt;Github Package publish&lt;/h2&gt;

&lt;h3 id=&quot;fork&quot;&gt;Fork&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/upload/2024-11-11-Github_Package_로_라이브러리_배포하기.md/0.png&quot; alt=&quot;0&quot; /&gt;&lt;em&gt;image.png&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;일단 사용하고자 하는 라이브러리인 Node-Media-Server 를 fork 해왔다.&lt;/p&gt;

&lt;p&gt;MIT 라이센스는 수정, 배포, 복제 등을 자유롭게 허용하는 관대한 라이센스라서 마음대로 fork 해와서 사용해도 괜찮지만 원저작자의 고지는 해야한다.&lt;/p&gt;

&lt;h3 id=&quot;packagejson&quot;&gt;Package.json&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;json
  &quot;name&quot;: &quot;@hoeeeeeh/node-media-server&quot;,
  &quot;publishConfig&quot;: {
    &quot;registry&quot;: &quot;https://npm.pkg.github.com/&quot;
  },
  &quot;version&quot;: &quot;2.7.27&quot;,
  &quot;description&quot;: &quot;A Node.js implementation of RTMP Server for naver boostcamp project : liboo&quot;,
  &quot;bin&quot;: &quot;bin/app.js&quot;,
  &quot;main&quot;: &quot;src/node_media_server.js&quot;,
  &quot;types&quot;: &quot;src/node_media_server.d.ts&quot;,

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;name: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@hoeeeeeh&lt;/code&gt; 처럼 앞에 자신의 Github ID 로 구분자를 주면 된다.&lt;/li&gt;
  &lt;li&gt;publishConfig: npm 이 아닌 Github Package 로 지정해야하기 때문에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;registry&quot;: &quot;https://npm.pkg.github.com/&quot;&lt;/code&gt; 로 지정한다.&lt;/li&gt;
  &lt;li&gt;version: 버전은 아무렇게나 지정해도 되는데, 만약 2.7.27 로 배포한 후에 수정 후 다시 배포한다면 2.7.27 이 아닌 다른 버전이어야 한다.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main, types&lt;/code&gt; : 기존의 node-media-server 는 js 로 작성된 라이브러리이다. 그러나 liboo 의 서버는 ts 로 작성할 예정이기 때문에 자바스크립트로 작성한 것들의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;타입&lt;/code&gt; 에 대한 선언이 필요하다.&lt;/p&gt;

    &lt;p&gt;보통은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@types/{package_name}&lt;/code&gt;  으로 타입을 내려받을 수 있겠지만 Github Package 에는 npm 의 @types 같은 네임스페이스가 없다.&lt;/p&gt;

    &lt;p&gt;그래서 우리는 package.json 에 “types” 를 만들고, 타입에 대한 선언을 담고 있는 d.ts 파일을 지정해줘야한다.&lt;/p&gt;

    &lt;p&gt;다행히도 node-media-server 는 이미 @types 에 선언되어있던 것이 있다. 그래서 그 파일을 들고와서 liboo 에 맞게끔 조금 수정한 뒤에, types: ….d.ts 로 걸어주면 된다.&lt;/p&gt;

    &lt;p&gt;타입스크립트는 이름이 같은 js 와 d.ts 인 경우에는 자동으로 타입으로 생각해서 읽는다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;publish&quot;&gt;Publish&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;json
// 프로젝트 root 에 .npmrc 혹은 .yarnrc.yml
npmScopes:
  hoeeeeeh:
    npmRegistries:
      &quot;https://npm.pkg.github.com/&quot;:

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;스코프별로 레지스트리를 다르게 지정해줄 수 있다.&lt;/p&gt;

&lt;p&gt;우리는 @hoeeeeeh/node-media-server 를 배포하는 것이기 때문에, hoeeeeeh 의 레지스트리를 Github Package 로 지정해준 것이다.&lt;/p&gt;

&lt;p&gt;만약 스코프를 지정하지않고 npm 레지스트리를 Github Package 로 바꿔버리면 평범한 라이브러리를 설치하려고 해도 github package 로 접근해서 찾기 때문에 문제가 발생한다.&lt;/p&gt;

&lt;p&gt;이후에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm publish&lt;/code&gt; 혹은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yarn publish&lt;/code&gt; 를 통해 배포해주면 된다.&lt;/p&gt;

&lt;h3 id=&quot;install&quot;&gt;Install&lt;/h3&gt;

&lt;p&gt;Github Package 는 npm 과는 다르게 인증 절차가 있어야만 install 을 할 수 있다.&lt;/p&gt;

&lt;p&gt;배포한 패키지를 사용할 프로젝트에서도 아래와 같은 셋팅을 해야한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;json
// .yarnrc.yml
npmScopes:
  hoeeeeeh:
    npmRegistryServer: &quot;https://npm.pkg.github.com/&quot;
    npmAuthToken: ${npmAuthToken}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그런데 .yarnrc.yml 에는 환경변수를 활용할 수가 없다. yarn v4 에서나 가능하다고 해서 지금 당장 환경변수를 활용하려면 아래와 같은 방법을 사용해야한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;javascript
// .yarn/plugin-env-npm.js
module.exports = {
  name: &apos;plugin-env-npm&apos;,
  factory: require =&amp;gt; ({
    hooks: {
      async getNpmAuthenticationHeader(currentHeader, registry, {ident}){
        // only trigger for specific scope
        if (!ident || ident.scope !== &apos;hoeeeeeh&apos;) {
          return currentHeader
        }

        // try getting token from process.env
        let bufEnv = process.env.BUF_REGISTRY_TOKEN
        // alternatively, try to find it in .env
        if (!bufEnv) {
          const fs = require(&apos;fs/promises&apos;)
          const fileContent = await fs.readFile(&apos;../.env&apos;, &apos;utf8&apos;)
          const rows = fileContent.split(/\r?\n/)
          for (const row of rows) {
            const [key, value] = row.split(&apos;:&apos;, 2)
            if (key.trim() === &apos;GITHUB_REGISTRY_TOKEN&apos;) {
              bufEnv = value.trim()
            }
          }
        }

        if (bufEnv) {
          return `${bufEnv}`
        }
        return currentHeader
      },
    },
  }),
}


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;프로젝트 루트에 있는 .yarn 폴더에 plugin-env-npm.js 라는 파일을 하나 작성하자.&lt;/p&gt;

&lt;p&gt;내용은 그냥 .env 파일을 불러와서 환경변수를 읽어오는 내용이다.&lt;/p&gt;

&lt;p&gt;이후에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.yarnrc.yml&lt;/code&gt; 에는 아래와 같이 작성하면 된다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;javascript
npmScopes:
  hoeeeeeh:
    npmRegistryServer: &quot;https://npm.pkg.github.com/&quot;

plugins:
  - ./.yarn/plugin-env-npm.js

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;프로젝트 루트의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.env&lt;/code&gt; 도 작성해주자.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;javascript
GITHUB_REGISTRY_TOKEN: ${TOKEN_VALUE}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content>

      
      
      
      
      

      <author>
          <name>[&quot;hoeeeeeh&quot;]</name>
        
        
      </author>

      

      
        <category term="github-package" />
      
        <category term="yarn" />
      

      
        <summary type="html">프로젝트를 진행하면서 node-media-server 라이브러리를 사용하기로 결정해서 소스 코드를 천천히 뜯어보니 우리 서비스에 맞게끔 코드를 조금 수정할 필요가 있었다.</summary>
      

      
      
    </entry>
  
</feed>
